Functionality:  CLOSE

This looks pretty docent, good job.

ldr can take an x register or a w register or an sp or a pc.  If you
only check for x or w, you can wind up with some issues.

All of your branch instructions increment pc by four if they fail
to trigger.  Why do that for branch instructions, but not for
all of the other instructions?  This caused the evaluation code to
fail, with all of those misses.

ChatGPT's approach to clz seems sound, but you didn't send it the right
parameters.  More testing would've found this.

Design:  SATISFACTORY-ish

I talked in class about how professional software generally has fewer
comments than you'd expect, but will then have a paragraph of comments
in tough parts.  I see few comments, but I don't see any commentary
around difficult bits of code like clz and ldr and str.  Please add
some more comments, and we'll count it as satisfactory at the initial
commit.

You created two tests, as instructed.

gcc -I. -g -Wall --std=gnu11 -fpic -shared -o libsimulator.so machine.c code.c
=== DESIGN =====================================================================

=== Compiles without warnings ==================================================
=== PASS =======================================================================

=== Multiple functions =========================================================
Added 13 helper functions
=== PASS =======================================================================

=== INTERNALS ==================================================================

=== get_value constant =========================================================
=== PASS =======================================================================

=== get_value w register =======================================================
=== PASS =======================================================================

=== get_value x register =======================================================
=== PASS =======================================================================

=== get_value sp ===============================================================
=== PASS =======================================================================

=== put_value w register =======================================================
=== PASS =======================================================================

=== put_value x register =======================================================
=== PASS =======================================================================

=== put_value sp ===============================================================
=== PASS =======================================================================

=== get_memory_address x register ==============================================
=== PASS =======================================================================

=== get_memory_address x register plus offset ==================================
address 0xfff8
=== PASS =======================================================================

=== get_memory_address sp register =============================================
=== PASS =======================================================================

=== LOAD AND STORE =============================================================

=== ldr w register =============================================================
Condition codes:
Registers:
	w/x1 = 0x12345678
	sp = 0xFFD0
	pc = 0xDEADC0DE
Stack:
	      sp-> +-------------------------+
	0x0000FFD0 | 78 56 34 12 21 43 65 87 |
	           +-------------------------+
	0x0000FFD8 | 00 00 00 00 00 00 00 00 |
	           +-------------------------+
	0x0000FFE0 | 00 00 00 00 00 00 00 00 |
	           +-------------------------+
	0x0000FFE8 | 00 00 00 00 00 00 00 00 |
	           +-------------------------+
	0x0000FFF0 | 00 00 00 00 00 00 00 00 |
	           +-------------------------+
=== PASS =======================================================================

=== ldr x register =============================================================
Condition codes:
Registers:
	w/x2 = 0x1234567887654321
	sp = 0xFFD0
	pc = 0xDEADC0DE
Stack:
	      sp-> +-------------------------+
	0x0000FFD0 | 68 24 68 24 68 24 68 24 |
	           +-------------------------+
	0x0000FFD8 | 21 43 65 87 78 56 34 12 |
	           +-------------------------+
	0x0000FFE0 | 57 13 57 13 57 13 57 13 |
	           +-------------------------+
	0x0000FFE8 | 00 00 00 00 00 00 00 00 |
	           +-------------------------+
	0x0000FFF0 | 00 00 00 00 00 00 00 00 |
	           +-------------------------+
=== PASS =======================================================================

=== ldr sp register ============================================================
Condition codes:
Registers:
	sp = 0xFFD0
	pc = 0xDEADC0DE
Stack:
	      sp-> +-------------------------+
	0x0000FFD0 | 68 24 68 24 68 24 68 24 |
	           +-------------------------+
	0x0000FFD8 | F0 FF 00 00 00 00 00 00 |
	           +-------------------------+
	0x0000FFE0 | 57 13 57 13 57 13 57 13 |
	           +-------------------------+
	0x0000FFE8 | 00 00 00 00 00 00 00 00 |
	           +-------------------------+
	0x0000FFF0 | 00 00 00 00 00 00 00 00 |
	           +-------------------------+
Failure: incorrect result of ldr in sp on line 40 of 03c.c
=== MISS =======================================================================

=== str w register =============================================================
Condition codes:
Registers:
	w/x1 = 0x20815fab
	sp = 0xFFD0
	pc = 0xDEADC0DE
Stack:
	      sp-> +-------------------------+
	0x0000FFD0 | 68 24 68 24 AB 5F 81 20 |
	           +-------------------------+
	0x0000FFD8 | 57 13 57 13 00 00 00 00 |
	           +-------------------------+
	0x0000FFE0 | 00 00 00 00 00 00 00 00 |
	           +-------------------------+
	0x0000FFE8 | 00 00 00 00 00 00 00 00 |
	           +-------------------------+
	0x0000FFF0 | 00 00 00 00 00 00 00 00 |
	           +-------------------------+
=== PASS =======================================================================

=== str x register =============================================================
Condition codes:
Registers:
	w/x2 = 0xc05c20815fab0000
	sp = 0xFFD0
	pc = 0xDEADC0DE
Stack:
	      sp-> +-------------------------+
	0x0000FFD0 | 68 24 68 24 68 24 68 24 |
	           +-------------------------+
	0x0000FFD8 | 00 00 AB 5F 81 20 5C C0 |
	           +-------------------------+
	0x0000FFE0 | 57 13 57 13 57 13 57 13 |
	           +-------------------------+
	0x0000FFE8 | 00 00 00 00 00 00 00 00 |
	           +-------------------------+
	0x0000FFF0 | 00 00 00 00 00 00 00 00 |
	           +-------------------------+
=== PASS =======================================================================

=== ldrb w register ============================================================
Condition codes:
Registers:
	w/x1 = 0x78
	sp = 0xFFD0
	pc = 0xDEADC0DE
Stack:
	      sp-> +-------------------------+
	0x0000FFD0 | 78 56 34 12 21 43 65 87 |
	           +-------------------------+
	0x0000FFD8 | 00 00 00 00 00 00 00 00 |
	           +-------------------------+
	0x0000FFE0 | 00 00 00 00 00 00 00 00 |
	           +-------------------------+
	0x0000FFE8 | 00 00 00 00 00 00 00 00 |
	           +-------------------------+
	0x0000FFF0 | 00 00 00 00 00 00 00 00 |
	           +-------------------------+
=== PASS =======================================================================

=== ldrb x register ============================================================
Condition codes:
Registers:
	w/x2 = 0x21
	sp = 0xFFD0
	pc = 0xDEADC0DE
Stack:
	      sp-> +-------------------------+
	0x0000FFD0 | 68 24 68 24 68 24 68 24 |
	           +-------------------------+
	0x0000FFD8 | 21 43 65 87 78 56 34 12 |
	           +-------------------------+
	0x0000FFE0 | 57 13 57 13 57 13 57 13 |
	           +-------------------------+
	0x0000FFE8 | 00 00 00 00 00 00 00 00 |
	           +-------------------------+
	0x0000FFF0 | 00 00 00 00 00 00 00 00 |
	           +-------------------------+
=== PASS =======================================================================

=== ldrb sp register ===========================================================
Condition codes:
Registers:
	sp = 0xD0
	pc = 0xDEADC0DE
Stack:
	           +-------------------------+
	0x000000C0 | 68 24 68 24 68 24 68 24 |
	           +-------------------------+
	0x000000C8 | D0 FF 00 00 00 00 00 00 |
	      sp-> +-------------------------+
	0x000000D0 | 57 13 57 13 57 13 57 13 |
	           +-------------------------+
	0x000000D8 | 00 00 00 00 00 00 00 00 |
	           +-------------------------+
	0x000000E0 | 00 00 00 00 00 00 00 00 |
	           +-------------------------+
	0x000000E8 | 00 00 00 00 00 00 00 00 |
	           +-------------------------+
=== PASS =======================================================================

=== strb w register ============================================================
Condition codes:
Registers:
	w/x1 = 0x20815fab
	sp = 0xFFD0
	pc = 0xDEADC0DE
Stack:
	      sp-> +-------------------------+
	0x0000FFD0 | 68 24 68 24 AB CA AD DE |
	           +-------------------------+
	0x0000FFD8 | 57 13 57 13 00 00 00 00 |
	           +-------------------------+
	0x0000FFE0 | 00 00 00 00 00 00 00 00 |
	           +-------------------------+
	0x0000FFE8 | 00 00 00 00 00 00 00 00 |
	           +-------------------------+
	0x0000FFF0 | 00 00 00 00 00 00 00 00 |
	           +-------------------------+
=== PASS =======================================================================

=== strb x register ============================================================
Condition codes:
Registers:
	w/x2 = 0xc0de5c20815fabcd
	sp = 0xFFD0
	pc = 0xDEADC0DE
Stack:
	      sp-> +-------------------------+
	0x0000FFD0 | 68 24 68 24 68 24 68 24 |
	           +-------------------------+
	0x0000FFD8 | CD AB A1 5C DE C0 AD DE |
	           +-------------------------+
	0x0000FFE0 | 57 13 57 13 57 13 57 13 |
	           +-------------------------+
	0x0000FFE8 | 00 00 00 00 00 00 00 00 |
	           +-------------------------+
	0x0000FFF0 | 00 00 00 00 00 00 00 00 |
	           +-------------------------+
=== PASS =======================================================================

=== OTHER OPERATIONS ===========================================================

=== mov w registers ============================================================
=== PASS =======================================================================

=== mov constant to x register =================================================
=== PASS =======================================================================

=== add w register and constant ================================================
w1=0x37
=== PASS =======================================================================

=== add x registers ============================================================
x4=0xa23456789
=== PASS =======================================================================

=== sub register and constant ==================================================
=== PASS =======================================================================

=== mul w register =============================================================
=== PASS =======================================================================

=== udiv x register ============================================================
x4=0x20
=== PASS =======================================================================

=== lsl w register and constant ================================================
w1=0x68
=== PASS =======================================================================

=== lsl x registers ============================================================
x4=0x12345678900
=== PASS =======================================================================

=== lsr w register and constant ================================================
w1=0x9
=== PASS =======================================================================

=== and w registers ============================================================
w4=0x3050701
=== PASS =======================================================================

=== orr w registers ============================================================
w4=0x2f4f6f89
=== PASS =======================================================================

=== eor w register =============================================================
w4=0x2c4a6888
=== PASS =======================================================================

=== b ==========================================================================
=== PASS =======================================================================

=== bl =========================================================================
pc=0xfeedc0de
x30=0xdeadc0de
=== PASS =======================================================================

=== ret ========================================================================
=== PASS =======================================================================

=== cmp zero reg ===============================================================
=== PASS =======================================================================

=== cmp zero const =============================================================
=== PASS =======================================================================

=== cmp pos reg ================================================================
=== PASS =======================================================================

=== cmp pos const ==============================================================
=== PASS =======================================================================

=== cmp neg reg ================================================================
=== PASS =======================================================================

=== cmp neg const ==============================================================
=== PASS =======================================================================

=== b.ne true ==================================================================
=== PASS =======================================================================

=== b.ne false =================================================================
Failure: incorrect result of bne in pc on line 34 of 04l.c
=== MISS =======================================================================

=== b.eq true ==================================================================
=== PASS =======================================================================

=== b.eq false =================================================================
Failure: incorrect result of beq in pc on line 33 of 04n.c
Failure: incorrect result of beq in pc on line 38 of 04n.c
Failure: incorrect result of beq in pc on line 43 of 04n.c
=== MISS =======================================================================

=== b.lt true ==================================================================
=== PASS =======================================================================

=== b.lt false =================================================================
Failure: incorrect result of blt in pc on line 33 of 04p.c
Failure: incorrect result of blt in pc on line 38 of 04p.c
Failure: incorrect result of blt in pc on line 43 of 04p.c
=== MISS =======================================================================

=== b.gt true ==================================================================
=== PASS =======================================================================

=== b.gt false =================================================================
Failure: incorrect result of bgt in pc on line 33 of 04r.c
Failure: incorrect result of bgt in pc on line 38 of 04r.c
Failure: incorrect result of bgt in pc on line 43 of 04r.c
=== MISS =======================================================================

=== b.le true ==================================================================
=== PASS =======================================================================

=== b.le false =================================================================
Failure: incorrect result of ble in pc on line 33 of 04t.c
Failure: incorrect result of ble in pc on line 38 of 04t.c
=== MISS =======================================================================

=== b.ge true ==================================================================
=== PASS =======================================================================

=== b.ge false =================================================================
Failure: incorrect result of bge in pc on line 33 of 04v.c
Failure: incorrect result of bge in pc on line 38 of 04v.c
=== MISS =======================================================================

=== BIT COUNTING ===============================================================

=== clz x registers ============================================================
x4=0x0
Failure: incorrect result of clz in x4 on line 24 of 08a.c
=== MISS =======================================================================

=== clz w registers ============================================================
x4=0x0
Failure: incorrect result of clz in w4 on line 24 of 08c.c
=== MISS =======================================================================

=== MEMORY ERRORS ==============================================================

=== No memory errors ===========================================================
==100532== Memcheck, a memory error detector
==100532== Copyright (C) 2002-2022, and GNU GPL'd, by Julian Seward et al.
==100532== Using Valgrind-3.19.0 and LibVEX; rerun with -h for copyright info
==100532== Command: /home/student/tools/cosc208/projects/simulator/grading/tests/../repo/simulator /home/student/tools/cosc208/projects/simulator/grading/tests/07a.txt 0x714 0xFFF0
==100532== 
Condition codes:
Registers:
	sp = 0xFFF0
	pc = 0x714
Stack:
	      sp-> +-------------------------+
	0x0000FFF0 | 00 00 00 00 00 00 00 00 |
	           +-------------------------+


sub sp, sp, #16
Condition codes:
Registers:
	sp = 0xFFE0
	pc = 0x718
Stack:
	      sp-> +-------------------------+
	0x0000FFE0 | 00 00 00 00 00 00 00 00 |
	           +-------------------------+
	0x0000FFE8 | 00 00 00 00 00 00 00 00 |
	           +-------------------------+
	0x0000FFF0 | 00 00 00 00 00 00 00 00 |
	           +-------------------------+


mov w0, #8
Condition codes:
Registers:
	w/x0 = 0x8
	sp = 0xFFE0
	pc = 0x71C
Stack:
	      sp-> +-------------------------+
	0x0000FFE0 | 00 00 00 00 00 00 00 00 |
	           +-------------------------+
	0x0000FFE8 | 00 00 00 00 00 00 00 00 |
	           +-------------------------+
	0x0000FFF0 | 00 00 00 00 00 00 00 00 |
	           +-------------------------+


str w0, [sp, #12]
Condition codes:
Registers:
	w/x0 = 0x8
	sp = 0xFFE0
	pc = 0x720
Stack:
	      sp-> +-------------------------+
	0x0000FFE0 | 00 00 00 00 00 00 00 00 |
	           +-------------------------+
	0x0000FFE8 | 00 00 00 00 08 00 00 00 |
	           +-------------------------+
	0x0000FFF0 | 00 00 00 00 00 00 00 00 |
	           +-------------------------+


ldr w0, [sp, #12]
Condition codes:
Registers:
	w/x0 = 0x8
	sp = 0xFFE0
	pc = 0x724
Stack:
	      sp-> +-------------------------+
	0x0000FFE0 | 00 00 00 00 00 00 00 00 |
	           +-------------------------+
	0x0000FFE8 | 00 00 00 00 08 00 00 00 |
	           +-------------------------+
	0x0000FFF0 | 00 00 00 00 00 00 00 00 |
	           +-------------------------+


cmp w0, #0
Condition codes: P
Registers:
	w/x0 = 0x8
	sp = 0xFFE0
	pc = 0x728
Stack:
	      sp-> +-------------------------+
	0x0000FFE0 | 00 00 00 00 00 00 00 00 |
	           +-------------------------+
	0x0000FFE8 | 00 00 00 00 08 00 00 00 |
	           +-------------------------+
	0x0000FFF0 | 00 00 00 00 00 00 00 00 |
	           +-------------------------+


b.ne 738
Condition codes: P
Registers:
	w/x0 = 0x8
	sp = 0xFFE0
	pc = 0x738
Stack:
	      sp-> +-------------------------+
	0x0000FFE0 | 00 00 00 00 00 00 00 00 |
	           +-------------------------+
	0x0000FFE8 | 00 00 00 00 08 00 00 00 |
	           +-------------------------+
	0x0000FFF0 | 00 00 00 00 00 00 00 00 |
	           +-------------------------+


mov w0, #6
Condition codes: P
Registers:
	w/x0 = 0x6
	sp = 0xFFE0
	pc = 0x73C
Stack:
	      sp-> +-------------------------+
	0x0000FFE0 | 00 00 00 00 00 00 00 00 |
	           +-------------------------+
	0x0000FFE8 | 00 00 00 00 08 00 00 00 |
	           +-------------------------+
	0x0000FFF0 | 00 00 00 00 00 00 00 00 |
	           +-------------------------+


str w0, [sp, #12]
Condition codes: P
Registers:
	w/x0 = 0x6
	sp = 0xFFE0
	pc = 0x740
Stack:
	      sp-> +-------------------------+
	0x0000FFE0 | 00 00 00 00 00 00 00 00 |
	           +-------------------------+
	0x0000FFE8 | 00 00 00 00 06 00 00 00 |
	           +-------------------------+
	0x0000FFF0 | 00 00 00 00 00 00 00 00 |
	           +-------------------------+


nop 
Condition codes: P
Registers:
	w/x0 = 0x6
	sp = 0xFFE0
	pc = 0x744
Stack:
	      sp-> +-------------------------+
	0x0000FFE0 | 00 00 00 00 00 00 00 00 |
	           +-------------------------+
	0x0000FFE8 | 00 00 00 00 06 00 00 00 |
	           +-------------------------+
	0x0000FFF0 | 00 00 00 00 00 00 00 00 |
	           +-------------------------+


add sp, sp, #16
Condition codes: P
Registers:
	w/x0 = 0x6
	sp = 0xFFF0
	pc = 0x748
Stack:
	           +-------------------------+
	0x0000FFE0 | 00 00 00 00 00 00 00 00 |
	           +-------------------------+
	0x0000FFE8 | 00 00 00 00 06 00 00 00 |
	      sp-> +-------------------------+
	0x0000FFF0 | 00 00 00 00 00 00 00 00 |
	           +-------------------------+


ret 
Condition codes: P
Registers:
	w/x0 = 0x6
	sp = 0xFFF0
	pc = 0x123456789ABCDEF
Stack:
	           +-------------------------+
	0x0000FFE0 | 00 00 00 00 00 00 00 00 |
	           +-------------------------+
	0x0000FFE8 | 00 00 00 00 06 00 00 00 |
	      sp-> +-------------------------+
	0x0000FFF0 | 00 00 00 00 00 00 00 00 |
	           +-------------------------+


==100532== 
==100532== HEAP SUMMARY:
==100532==     in use at exit: 0 bytes in 0 blocks
==100532==   total heap usage: 21 allocs, 21 frees, 12,084 bytes allocated
==100532== 
==100532== For a detailed leak analysis, rerun with: --leak-check=full
==100532== 
==100532== For lists of detected and suppressed errors, rerun with: -s
==100532== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==100532== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
=== PASS =======================================================================

